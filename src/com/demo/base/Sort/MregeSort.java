package com.demo.base.Sort;

import java.util.Arrays;

/**
 * 归并排序
 * @author WangShuaiJie
 *
 */
public class MregeSort {

	public static void mergeSort(int[] arr,int low,int high) {
		int middle=(low+high)/2;
		if(low<high) {
			//处理左边
			mergeSort(arr, low, middle);
			//处理右边
			mergeSort(arr, middle+1, high);
			//归并
			merge(arr, low, middle, high);
		}
		
	}
	public static void merge(int[] arr,int low,int middle,int high) {
		//用于存储归并的临时数组
		int[] temp=new int[high-low+1];
		//记录第一个数组中需要遍历的下标
		int i=low;
		//记录第二个数组中需要遍历的下标
		int j=middle+1;
		//记录在临时数组存放的下标
		int index=0;
		//遍历两个数组取出小的数字，放入临时数组
		while(i<=middle&&j<=high) {
			//第一个数组的数据更小
			if(arr[i]<=arr[j]) {
				//放入临时数组
				temp[index]=arr[i];
				i++;
			}else {
				temp[index]=arr[j];
				j++;
			}
			index++;
		}
		//处理多余的数据
		while(j<=high) {
			temp[index]=arr[j];
			j++;
			index++;
		}
		while(i<=middle) {
			temp[index]=arr[i];
			i++;
			index++;
		}
		//把临时数组的数据存入原数组
		for(int k=0;k<temp.length;k++) {
			arr[k+low]=temp[k];
		}
	}
	
	public static void main(String[] args) {
		int[] arr = new int[] { 5, 7, 3, 9, 8, 4, 0, 6, 7, 2 };
		mergeSort(arr, 0, arr.length - 1);
		System.out.println(Arrays.toString(arr));
	}
	
}
