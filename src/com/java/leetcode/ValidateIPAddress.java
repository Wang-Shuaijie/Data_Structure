package com.java.leetcode;

public class ValidateIPAddress {
	/**
	 * 编写一个函数来验证输入的字符串是否是有效的 IPv4 或 IPv6 地址。
IPv4 地址由十进制数和点来表示，每个地址包含4个十进制数，其范围为 0 - 255， 用(".")分割。比如，172.16.254.1；
同时，IPv4 地址内的数不会以 0 开头。比如，地址 172.16.254.01 是不合法的。
IPv6 地址由8组16进制的数字来表示，每组表示 16 比特。这些组数字通过 (":")分割。比如,  2001:0db8:85a3:0000:0000:8a2e:0370:7334 是一个有效的地址。而且，我们可以加入一些以 0 开头的数字，字母可以使用大写，也可以是小写。所以， 2001:db8:85a3:0:0:8A2E:0370:7334 也是一个有效的 IPv6 address地址 (即，忽略 0 开头，忽略大小写)。
然而，我们不能因为某个组的值为 0，而使用一个空的组，以至于出现 (::) 的情况。 比如， 2001:0db8:85a3::8A2E:0370:7334 是无效的 IPv6 地址。
同时，在 IPv6 地址中，多余的 0 也是不被允许的。比如， 02001:0db8:85a3:0000:0000:8a2e:0370:7334 是无效的。
说明: 你可以认为给定的字符串里没有空格或者其他特殊字符。

示例 1:

输入: "172.16.254.1"
输出: "IPv4"
解释: 这是一个有效的 IPv4 地址, 所以返回 "IPv4"。

示例 2:
输入: "2001:0db8:85a3:0:0:8A2E:0370:7334"
输出: "IPv6"
解释: 这是一个有效的 IPv6 地址, 所以返回 "IPv6"。

	 */
	public String validIPAddress(String IP) {
		if(validateIPv4(IP)) {
			return "IPv4";
		}
		if(validateIPv6(IP)) {
			return "IPv6";
		}
		return "Neither";
	}
	
	private boolean validateIPv4(String IP) {
		String[] strs=IP.split("\\.", -1);
		if(strs.length!=4) {
			return false;
		}
		for(String str:strs) {
			int len=str.length();
			if(len<1 || len>3 || (len>1 && str.charAt(0)=='0')) {
				return false;
			}
			for(char c:str.toCharArray()) {
				//如果不是数字
				if(!Character.isDigit(c)) {
					return false;
				}
			}
			if(Integer.parseInt(str)>255) {
				return false;
			}
		}
		return true;	
	}
	
	private boolean validateIPv6(String IP) {
		String[] strs=IP.toLowerCase().split(":",-1);
		if(strs.length != 8) {
			return false;
		}
		for(String str:strs) {
			int len=str.length();
			if(len<1 || len>4) {
				return false;
			}
			for(char c:str.toCharArray()) {
				if(!Character.isDigit(c) && (c<'a' || c>'f')) {
					return false;
				}
			}
		}
		return true;
	}
	
	
	
	/*

split() 方法根据匹配给定的正则表达式来拆分字符串。

注意： . 、 | 和 * 等转义字符，必须得加 \\。

注意：多个分隔符，可以用 | 作为连字符。
split(regex, limit)方法

第一个参数同上一样 参数为分割的字符串或者正则表达式

第二个参数limit 作用是控制 模式应用的次数 

其中 limit为非正整数表示 模式被应用尽可能多的次数 比如-1

limit =0 表示模式应用尽可能多的次数，数组可以是任意长度，并且结尾空字符串将被丢弃。

limit>0时 那么模式将会应用limit-1次 数组长度不会超过limit
	 */
}
